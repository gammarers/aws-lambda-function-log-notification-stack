// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hello 1`] = `
{
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-south-2": {
        "states": "states.ap-south-2.amazonaws.com",
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ap-southeast-4": {
        "states": "states.ap-southeast-4.amazonaws.com",
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-central-2": {
        "states": "states.eu-central-2.amazonaws.com",
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "il-central-1": {
        "states": "states.il-central-1.amazonaws.com",
      },
      "me-central-1": {
        "states": "states.me-central-1.amazonaws.com",
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "LambdaFunctionLogNotificationTopic967482F1": {
      "Properties": {
        "DisplayName": "Lambda Function Log Notification Topic",
        "TopicName": "lambda-func-log-notification-72197c83-topic",
      },
      "Type": "AWS::SNS::Topic",
    },
    "LambdaFunctionLogNotificationTopicfooexamplecom3BAB5817": {
      "Properties": {
        "Endpoint": "foo@example.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "LambdaFunctionLogNotificationTopic967482F1",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "LambdaFunctionLogSubscriptionFuncFailureRuleA08C79E7": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "requestContext": {
              "functionArn": [
                {
                  "wildcard": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "NotificationFunction0492F7EA",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Lambda Function Invocation Result - Failure",
          ],
          "source": [
            "lambda",
          ],
        },
        "Name": "lambda-func-log-subscription-72197c83-func-failure-rule",
        "State": "ENABLED",
      },
      "Type": "AWS::Events::Rule",
    },
    "LambdaFunctionLogSubscriptionFuncSuccessRuleDDA56C1C": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "requestContext": {
              "functionArn": [
                {
                  "wildcard": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "NotificationFunction0492F7EA",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Lambda Function Invocation Result - Success",
          ],
          "source": [
            "lambda",
          ],
        },
        "Name": "lambda-func-log-subscription-72197c83-func-success-rule",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "StateMachine2E01A3A5",
            },
            "Id": "Target0",
            "RoleArn": {
              "Fn::GetAtt": [
                "StartExecMachineRole28D483E3",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LogNotificationFunctionLogGroup0279D165": {
      "DeletionPolicy": "RetainExceptOnCreate",
      "Properties": {
        "LogGroupName": "/aws/lambda/lambda-func-log-subscription-72197c83-func",
        "RetentionInDays": 90,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "NotificationFunction0492F7EA": {
      "DependsOn": [
        "NotificationLambdaExecutionRoleDefaultPolicy2F2E1B0F",
        "NotificationLambdaExecutionRole6DE166BB",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "646d92a2307873b10c5adcbd5ce4d8b76c8d02b67fb07e501a1689eb76d025d3.zip",
        },
        "Description": "src/funcs/notification.lambda.ts",
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "lambda-func-log-subscription-72197c83-func",
        "Handler": "index.handler",
        "LoggingConfig": {
          "ApplicationLogLevel": "INFO",
          "LogFormat": "JSON",
          "LogGroup": {
            "Ref": "LogNotificationFunctionLogGroup0279D165",
          },
          "SystemLogLevel": "INFO",
        },
        "Role": {
          "Fn::GetAtt": [
            "NotificationLambdaExecutionRole6DE166BB",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "NotificationFunctionEventInvokeConfig5A0E1AB1": {
      "Properties": {
        "DestinationConfig": {
          "OnFailure": {
            "Destination": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":events:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId",
                  },
                  ":event-bus/default",
                ],
              ],
            },
          },
          "OnSuccess": {
            "Destination": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":events:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId",
                  },
                  ":event-bus/default",
                ],
              ],
            },
          },
        },
        "FunctionName": {
          "Ref": "NotificationFunction0492F7EA",
        },
        "Qualifier": "$LATEST",
      },
      "Type": "AWS::Lambda::EventInvokeConfig",
    },
    "NotificationLambdaExecutionRole6DE166BB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "events:PutEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:events:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":event-bus/default",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "failure-destination-event-bridge-policy",
          },
        ],
        "RoleName": "lambda-log-notification-func-72197c83-exec-role",
      },
      "Type": "AWS::IAM::Role",
    },
    "NotificationLambdaExecutionRoleDefaultPolicy2F2E1B0F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":event-bus/default",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "NotificationLambdaExecutionRoleDefaultPolicy2F2E1B0F",
        "Roles": [
          {
            "Ref": "NotificationLambdaExecutionRole6DE166BB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StartExecMachineRole28D483E3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "lambda func log subscription notification start exec machine (send notification).",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "states:StartExecution",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "states-start-execution-policy",
          },
        ],
        "RoleName": "log-notification-start-exec-machine-72197c83-role",
      },
      "Type": "AWS::IAM::Role",
    },
    "StartExecMachineRoleDefaultPolicy9C23DAB3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "StateMachine2E01A3A5",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StartExecMachineRoleDefaultPolicy9C23DAB3",
        "Roles": [
          {
            "Ref": "StartExecMachineRole28D483E3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StateMachine2E01A3A5": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "StateMachineRoleDefaultPolicyDF1E6607",
        "StateMachineRoleB840431D",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"Init","States":{"Init":{"Type":"Pass","Result":"","ResultPath":"$.Prepare.Concatenated.StackTrace","Next":"GetLogEvents"},"GetLogEvents":{"Type":"Pass","ResultPath":"$.Temp.Log","Parameters":{"Events.$":"$.detail.responsePayload.logEvents"},"Next":"CheckUntreatedLogEventDetailExist"},"CheckUntreatedLogEventDetailExist":{"Type":"Choice","Choices":[{"Variable":"$.Temp.Log.Events[0]","IsPresent":true,"Next":"GetLogEventDetail"}],"Default":"Succeed"},"GetUntreatedMessages":{"Type":"Pass","ResultPath":"$.TempStackTrace","Parameters":{"Lines.$":"$.TempStackTrace.Lines[1:]"},"Next":"CheckUntreatedLogEventDetailExist"},"SendNotification":{"Next":"GetUntreatedMessages","Type":"Task","InputPath":"$.Prepare.Sns.Topic","ResultPath":"$.Result.Sns.Topic","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::sns:publish","Parameters":{"TopicArn":"",
              {
                "Ref": "LambdaFunctionLogNotificationTopic967482F1",
              },
              "","Message.$":"$.Message","Subject.$":"$.Subject"}},"PrepareMessage":{"Type":"Pass","ResultPath":"$.Prepare.Sns.Topic","Parameters":{"Subject.$":"States.Format('😵 [Failur] AWS Lambda Function Invocation Failur Notification [{}][{}]', $.account, $.region)","Message.$":"States.Format('Account : {}\\nRegion : {}\\nFunction : {}\\nErrorMessage : {}\\nStackTrace : \\n{}', $.account, $.region, $.detail.requestContext.functionArn, $.detail.responsePayload.errorMessage, $.Prepare.Concatenated.StackTrace)"},"Next":"SendNotification"},"Succeed":{"Type":"Succeed"},"GetLogEventDetail":{"Type":"Pass","ResultPath":"$.Temp.Log.Event","Parameters":{"Detail.$":"States.ArrayGetItem($.Temp.Log.Events, 0)"},"Next":"GetLogEventMessage"},"GetLogEventMessage":{"Type":"Pass","ResultPath":"$.Temp.Log","Parameters":{"Parsed.$":"States.StringToJson($.Temp.Log.Event.Detail.message)"},"Next":"GetLogEventMessageStackTrace"},"GetLogEventMessageStackTrace":{"Type":"Pass","ResultPath":"$.Temp.StackTrace","Parameters":{"Lines.$":"$.Temp.Log.Parsed.message.stackTrace"},"Next":"CheckUntreatedMessageStackTraceLinesExist"},"CheckUntreatedMessageStackTraceLinesExist":{"Type":"Choice","Choices":[{"Variable":"$.Temp.StackTrace.Lines[0]","IsPresent":true,"Next":"GetLogEventMessageStackTraceLine"}],"Default":"PrepareMessage"},"UntreatedMessageTraceLines":{"Type":"Pass","ResultPath":"$.Temp.StackTrace","Parameters":{"Lines.$":"$.Temp.StackTrace.Lines[1:]"},"Next":"CheckUntreatedMessageStackTraceLinesExist"},"ConcatenateStackTraceLine":{"Type":"Pass","ResultPath":"$.Prepare.Concatenated","Parameters":{"StackTrace.$":"States.Format('{}{}\\n', $.Prepare.Concatenated.StackTrace, $.Temp.GetStackTrace.Line)"},"Next":"UntreatedMessageTraceLines"},"GetLogEventMessageStackTraceLine":{"Type":"Pass","ResultPath":"$.Temp.GetStackTrace","Parameters":{"Line.$":"States.ArrayGetItem($.Temp.StackTrace.Lines, 0)"},"Next":"ConcatenateStackTraceLine"}},"TimeoutSeconds":300}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "StateMachineRoleB840431D",
            "Arn",
          ],
        },
        "StateMachineName": "lambda-func-log-subscription-notification-72197c83-state-machine",
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "StateMachineRoleB840431D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StateMachineRoleDefaultPolicyDF1E6607": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "LambdaFunctionLogNotificationTopic967482F1",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StateMachineRoleDefaultPolicyDF1E6607",
        "Roles": [
          {
            "Ref": "StateMachineRoleB840431D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SubscriptionFilter0F100A80": {
      "DependsOn": [
        "SubscriptionFilterCanInvokeLambda00190AC0",
      ],
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt": [
            "NotificationFunction0492F7EA",
            "Arn",
          ],
        },
        "FilterPattern": "{ $.level = "ERROR" || $.level = "WARN" }",
        "LogGroupName": "example-function-log",
      },
      "Type": "AWS::Logs::SubscriptionFilter",
    },
    "SubscriptionFilterCanInvokeLambda00190AC0": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationFunction0492F7EA",
            "Arn",
          ],
        },
        "Principal": "logs.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":logs:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":log-group:example-function-log:*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
